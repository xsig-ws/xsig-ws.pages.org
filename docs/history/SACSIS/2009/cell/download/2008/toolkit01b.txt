<------------------------------------------------------------------------------->
Cell Speed Challenge 2008
お試し版ツールキット Version 2007-12-07 (Version 0.1)の使い方と解説

* 概要
このお試し版ツールキットver0.1は，1個のSPEを使って，連立1次方程式を解
くプログラムです．Cell Speed Challenge 2008の規定課題部門の雛型として
ご活用ください．
複数のSPEの利用や，SIMDによる高速化など，高速化を実現するための余地は
様々存在しています．
このドキュメントに加えて，課題データのメモリ上の配置などを示した
PowerPointの資料を用意しました(doc/toolkit01.ppt)．こちらも参考にしてください．

* 規定課題概要

N×Nの行列A, M×Nの行列bが与えられたときに，
Ax = b 
となる行列xを計算する速度を求めます．
Aを係数行列，bを右辺ベクトル，xを解ベクトルと呼びます．

* 補足
これらの設定は，最終的な「規定課題 詳細およびツールキット」において変
更になる場合があります．

1. 入力データ形式
メインメモリ上にあるサイズの作業領域が確保されており，
その先頭アドレス(ポインタbuf)から行列A,b,xの順に入力データが格納されて
います．
行列サイズN，右辺ベクトルの本数Mは，実行時に与えられます．
データの配置は，PowerPointの資料も参考にしてください．

2. 出力データの配置

計算したデータは，xの位置に格納します．xの領域以外にはどのような値が格
納されていてもかまいません．

3. 行列のサイズに関する制約

SPE1個で計算を行う，計算処理と転送処理とが独立したプログラムを提供する
ため，行列サイズに制限があります．
SPEのLocal StoreにA，b，xを格納するため，これらの合計サイズが224KB以内
でなければなりません．

4. SPEが受け取る情報

SPEのプログラムでは，次に示すような情報を受け取り，利用することができ
ます．

struct spe_ctrl{
    unsigned int flag;        //
    unsigned int id;          // SPEの識別番号
    unsigned int spe_num;     // SPEの個数(ver0.1では1)
    unsigned int buf;         // 作業領域の先頭ポインタ
    unsigned int buf_ctrl;    // 制御用ポインタ(ver0.1では未使用)

    unsigned int n;           // 行列のサイズN
    unsigned int m;           // 右辺ベクトルの本数M
    unsigned int dec_cnt;     // 実行時間計測用変数(変更禁止)
    unsigned int sync_addr;   // 同期用アドレス(ver0.1では未使用)
    unsigned int ls_addr[NUMBER_OF_SPES]; // SPE間通信用ポインタ(ver0.1では未使用)
    unsigned int padding[23-NUMBER_OF_SPES]; // パディング
};

<------------------------------------------------------------------------------->

* お試し版ツールキットの使い方

1. Cell オンラインサービス devel.cell-hibikino.net にログインしてください．

2. ホームディレクトリにtoolkit01.tar.gzをコピーして展開してください．

$ tar xzvf toolkit01.tar.gz
$ cd toolkit01

3. Makefileを一部修正します．

$ vi Makefile
USERNAME = USER NAMEの部分を，アカウント名に書き換えます
例) USERNAME = johndoe

4. SPEプログラムへのパスを修正します．

$ vi spe.h

#define EXE_SPE1 "/export/home/USERNAME/toolkit01/spe1"
#define EXE_SPE2 "/export/home/USERNAME/toolkit01/spe1"
#define EXE_SPE3 "/exoprt/home/USERNAME/toolkit01/spe1"
#define EXE_SPE4 "/export/home/USERNAME/toolkit01/spe1"
#define EXE_SPE5 "/export/home/USERNAME/toolkit01/spe1"
#define EXE_SPE6 "/export/home/USERNAME/toolkit01/spe1"
#define EXE_SPE7 "/export/home/USERNAME/toolkit01/spe1"

上記のUSERNAME部分をアカウント名で書き換えます．

5. コンパイルします

$ make

6. 実行します
6.1. Makefileで用意されているテスト用実行方法

$ make run

これは，(cellexec -t 30 ~/toolkit01/main 128 8 2)と同等です

6.2. コマンドラインで実行

$ cellexec -t 30 ~/toolkit01/main 128 8 2

上記は，mainという実行プログラム(PPE用．SPE用はspe1)を，
引数128, 8, 2で実行する場合の例．
第1引数: 行列サイズN
第2引数: 右辺ベクトルの本数M
第3引数: 問題の種類
         0: 解ベクトルの全要素が1.0，
         1: Aが三重対角行列
         else : 全要素が[0,1)のrandom密行列

注意点) 特に負荷が高いときに，以下のようにタイムアウトが発生する場合が
        確認されています．何度か実行してみてください．

==================================================================
$ make run
cellexec -t 30 /export/home/foobar/toolkit01/main 128 8 2
execute command: /export/home/foobar/toolkit01/main 128 8 2 timeout 30

timeout reached.

execute time:     30000431 usec
make: *** [run] 
==================================================================

<------------------------------------------------------------------------------->

* ファイル構成


define.h
    利用するSPEの数(1〜7)を指定します。現在は1を設定しています。
    
main_spe.c
    main_spe.cはSPEが実行するプログラムです。コンテスト参加者はこのファ
    イル中のspe_soleqs関数内を書き換えることになります。
    
main_ppe.c
    main_ppe.cはPPEが実行するプログラムです。 SPEプログラムを起動-終了
    までを担います。実際のコンテストでは，PPEによる計算処理を禁止する
    可能性がありますので，できるかぎりSPEで処理を行うようにしてくださ
    い。 現在のツールキットでは，問題行列 n ，解ベクトルの本数 m，問題
    のタイプは，標準入力から受け取ります。

spe.h
    それぞれのSPEが実行するプログラムのファイル名を指定します。ファイ
    ル名はユーザのディレクトリからのパスを指定します。ここでは，すべて
    のSPEが/export/home/USERNAME/toolkit01/spe1という名前のプログラム
    を利用する設定となっています。それぞれのSPEが異なるプログラムを実
    行してもかまいません。

spe1.c
    spe1.cは時間計測，データ転送用の関数が記述されたファイルです。

lib.c
    通常は，lib.c の内容を変更する必要はありません。 lib.cでは問題行列
    の生成や解答のチェックを行いますが，コンテストで現在のlib.cの各ルー
    チンを使用するとは限りません。
    
Makefile
    Makefileは，ソースコードから実行ファイルを生成するための規則を記述
    したファイルです。makeコマンドが参照します。ファイル構成やコンパイ
    ルの最適化オプションなどを変更しない場合には，このMakefileを変更す
    る必要はありません。

<------------------------------------------------------------------------------->

* プログラムの解説
    
file name: define.h
   1  /*----------------------------------------------------------------------*/
   2  /* Cell Speed Challenge 2008, ToolKit Version 2007-12-07                */
   3  /*----------------------------------------------------------------------*/
   4  #define NUMBER_OF_SPES 1
利用するSPEの数を指定します．ここでは1を設定しています．
1〜7の数字を設定します．

   5  #define USER_MEM   (10 * 1024 * 1024)         // user working memory
プログラムで使用できる作業領域の量を指定しています。
ここでは、40MB (10 * 1024 * 1024 * 4バイト)を指定しています。
ユーザは、ここで指定されたサイズのメモリを作業領域として利用することができます。

   6  
   7  /*----------------------------------------------------------------------*/
   8  #define DMA_TAG 0
   9  #define SPE_STDIO_BUF_SIZE 512
  10  #define SPE_DMA_ALIGN (128)
  11  
  12  /*----------------------------------------------------------------------*/
ここで指定したサイズの標準出力用バッファをSPEに生成しています．
SPE_STDIO_BUF_SIZEではSPE用の標準出力用関数spe_printfのためのバッファです。
この値は適切に調整してください。

  13  struct argument{
  14      int id;               //
  15      unsigned int sc_addr; //
  16      float padding[30];    // just for padding
  17  };
  18  
この構造体は，PPEからSPEに情報を伝えるために利用します．
SPEでは，まずこの構造体のデータを受信して処理を進めます．これにより，
ソーティングのデータ数や，データが格納されているメモリのアドレスを知る
ことができます．
SPE-PPE間のデータ転送は128バイト単位なので、パディングが宣言されています。

  19  /*----------------------------------------------------------------------*/
  20  struct spe_ctrl{
  21      unsigned int flag;        //
  22      unsigned int id;          //
  23      unsigned int spe_num;     //
  24      unsigned int buf;         //
  25      unsigned int buf_ctrl;    // 
  26  
  27      unsigned int n;           // matrix size
  28      unsigned int m;           // number of solution vector
  29      unsigned int dec_cnt;
  30      unsigned int sync_addr;
  31      unsigned int ls_addr[NUMBER_OF_SPES];    // 7 * 4 = 28 Byte
  32      unsigned int padding[23-NUMBER_OF_SPES]; // just for padding
  33  };
  34  /*----------------------------------------------------------------------*/
この構造体は、PPEからSPEに問題の構造などを伝えるために利用します。
係数行列Aのサイズ n 、右辺ベクトルの本数 m 、問題行列を含む作業領域へのポインタbufなどです。
SPE同士の同期用や、通信用のアドレスなども含まれています(現バージョンでは使いません)。

  35  
  36  struct spe_sync_block{
  37      unsigned int data[32];
  38  };
  39  
  40  /*----------------------------------------------------------------------*/
通信用の構造構造体です。
128バイトのデータを格納でき、SPE-PPE間の通信に使用します。

file name: lib.c
   1  /*----------------------------------------------------------------------*/
   2  /* Cell Speed Challenge 2008, ToolKit Version 2007-12-07                */
   3  /*----------------------------------------------------------------------*/
通常は，lib.c の内容を変更する必要はありません．
lib.cでは問題行列の生成や解答のチェックを行いますが，
コンテストで現在のlib.cの各ルーチンを使用するとは限りません。

   4  #include <stdio.h>
   5  #include <stdlib.h>
   6  #include <sys/time.h>
   7  #include <time.h>
   8  #include <spe/sys/spelib_types.h>
   9  #include <spe_stdio_srv.h>
  10  #include "define.h"
  11  #include <math.h>
  12  
  13  typedef union fs{
  14      float f;
  15      unsigned char c[4];
  16  }FS;
単精度の実数を16進数で表示するための共用体です。
CellBEはPowerPC準拠なので、x86とはエンディアンが異なるので注意が必要です。

  17  
  18  /*----------------------------------------------------------------------*/
  19  double my_clock()
  20  {
  21      struct timeval tv;
  22      gettimeofday(&tv, NULL);
  23      return tv.tv_sec + (double)tv.tv_usec*1e-6;
  24  };
時間計測用ルーチンです。

  25  
  26  void matrix_multiplication(int n, int m, float* a, float* x, float* b)
  27  {
  28      int i,j,k;
  29  
  30      for(k=0;k<m;k++){
  31          for(i=0;i<n;i++){
  32              b[k*n+i] = 0.0;
  33              for(j=0;j<n;j++){
  34                  b[k*n+i] += a[n*i+j]*x[k*n+j];
  35              }
  36          }
  37      }
  38  }
行列の乗算ルーチンです。
a, x, bのポインタで始まるメモリ領域を対象に、
n*n行列aとm*n行列xを乗算し、m*n行列bを生成します。

  39  
  40  void get_matrix(int n, int m, float* a, unsigned int s)
  41  {
  42      int i,j;
  43      int p,q;
  44  
  45      // generate by random values
  46      // srand((unsigned int)time(NULL));
  47      if(s == 1){
  48          // tridiagonal matrix
  49          p=2;
  50          q=2;
  51          for(i=0;i<n;i++){
  52              for(j=0;j<m;j++){
  53                  if(i+p<=j || j+q<=i) a[n*i+j] = 0.0;
  54                  else a[n*i+j] = ((float)rand()/(float)RAND_MAX);
  55              }
  56          }
  57      }
  58      else{
  59          for(j=0;j<m;j++){
  60              for(i=0;i<n;i++){
  61                  a[n*j+i] = ((float)rand()/(float)RAND_MAX);
  62              }
  63          }
  64      }
  65  }
問題行列Aの生成ルーチンです。
問題番号 s にしたがって問題の特徴が決まります。
現在のツールキットでは、sが1のときは三重対角行列、それ以外のときは密行列です。
各要素の値は[0,1)の範囲の乱数を格納しています。

  66  
  67  void generate_matrix(int n, int m, float* buf, unsigned int s)
  68  {
  69      int i;
  70      float* b;
  71      float* x;
  72      
  73      b = (float*)((unsigned int)buf+sizeof(float)*n*n);
  74      x = (float*)((unsigned int)b+sizeof(float)*n*m);
  75  
  76      if(s == 0){
  77          for(i=0;i<n*m;i++) x[i] = 1.0;
  78      }
  79      else{
  80          for(i=0;i<n*m;i++) x[i] = ((float)rand()/(float)RAND_MAX);
  81      }
  82  
  83      matrix_multiplication(n,m,buf,x,b);
  84  }
行列生成ルーチンです。
作業領域の先頭ポインタbufを受け取り、行列Aの場所を明けて行列b,xのアドレスを得ます。
問題番号 s にしたがって，答え行列xを得、それから右辺ベクトルbを生成します。

  85  
  86  void check(int n, int m, float* buf, unsigned int s)
  87  {
  88      int i,j;
  89      float* b;
  90      float* c;
  91      float* x;
  92      float ftxmax;
  93      float famax;
  94      float fta;
  95  
  96      float feps;
  97      FS fs;
  98      
  99      b = (float*)((unsigned int)buf+sizeof(float)*n*n);
 100      x = (float*)((unsigned int)b+sizeof(float)*n*m);
 101      c = (float*)((unsigned int)x+sizeof(float)*n*m);
 102  
 103      srand(s);
 104      get_matrix(n,n,buf,s);
 105      matrix_multiplication(n, m, buf, x, c);
 106  
 107      generate_matrix(n, m, buf, s);
 108  
 109      feps = 1.0;
 110      for(i=0;i<23;i++){
 111          feps *= 0.5;
 112      }
 113  
 114      famax = 0.0;
 115      for(i=0;i<n;i++){
 116          fta = 0.0;
 117          for(j=0;j<n;j++)
 118              fta += fabs(buf[n*j+i]);
 119          if(famax < fta) famax = fta;
 120      }
 121  
 122      ftxmax = fabs(c[0] - b[0]);
 123      for(i=1;i<n*m;i++){
 124          if(fabs(c[i] - b[i]) > ftxmax){
 125              ftxmax = fabs(c[i] - b[i]);
 126          }
 127      }
 128      fs.f = (float)ftxmax/((float)feps*(float)famax*(float)n);
 129      // for x86
 130      /*
 131        printf("check[%2d] : %1.5f (%02X%02X%02X%02X)\n",k,fs.f,
 132                *(unsigned char*)&fs.c[3],
 133                *(unsigned char*)&fs.c[2],
 134                *(unsigned char*)&fs.c[1],
 135                *(unsigned char*)&fs.c[0]);
 136      */
 137      // for ppc
 138      printf("check : %1.5f (%02X%02X%02X%02X)\n",
 139             fs.f,
 140             *(unsigned char*)&fs.c[0],
 141             *(unsigned char*)&fs.c[1],
 142             *(unsigned char*)&fs.c[2],
 143             *(unsigned char*)&fs.c[3]);
 144  }
解答チェック用のルーチンです。
答えが格納されたポインタxで始まる領域と、
PPEで実行した行列A × bの結果を、各要素について減算し、
答えが1以下であれば正しく計算できたことになります。

 145  
 146  void disp_matrix(int n, int m, float* a)
 147  {
 148      int i, j;
 149  
 150      // for standard output
 151      for(j=0;j<m;j++){
 152          for(i=0;i<n;i++){
 153              printf("%1.5f ",a[j*n+i]);
 154          }
 155          printf("\n");
 156      }
 157  }
行列表示用の関数です。


file name: main_ppe.c
   1  /*----------------------------------------------------------------------*/
   2  /* Cell Speed Challenge 2008, ToolKit Version 2007-12-07                */
   3  /*----------------------------------------------------------------------*/
   4  #include <stdio.h>
   5  #include <stdlib.h>
   6  #include <float.h>
   7  #include <fenv.h>
   8  #include <math.h>
   9  #include <time.h>
  10  #include <malloc.h>
  11  #include <spe/sys/spelib_types.h>
  12  #include <spe_stdio_srv.h>
  13  #include <spere_cbea.h>
  14  #include "spe_wrap.h"
  15  #include "ppe_util.h"
  16  #include "define.h"
  17  #include "spe.h"
  18  
  19  #define _XOPEN_SOURCE 600
main_ppe.cはPPEが実行するプログラムです。

  20  
  21  /*----------------------------------------------------------------------*/
  22  double my_clock();
  23  
  24  volatile static float buf[USER_MEM] _ALIGN;
  25  volatile static char  buf_ctrl[16*1024] _ALIGN;
bufは問題行列を含む、作業用の領域です。
作業領域は_ALIGNの記述で、128バイト境界に合わせて確保されます。
float型で宣言されているので，1要素あたり4バイトです。
buf全体で、4*10*1024*1024(=40M)バイト使うことができます。

  26  
  27  volatile static struct argument sarg[NUMBER_OF_SPES] _ALIGN;
  28  volatile static struct spe_ctrl ctrl[NUMBER_OF_SPES] _ALIGN;
  29  volatile static struct spe_sync_block sync_addr[NUMBER_OF_SPES] _ALIGN;
制御用の構造体の宣言です。	
主にSPEプログラムの起動や時間計測に利用します。
すべてのSPEで同じプログラムを起動して，
SPEのみで処理をおこなう場合には，このファイルを変更する必要がありません．

  30  
  31  void get_matrix(int n, int m, float* a, unsigned int s);
  32  void generate_matrix(int n, int m, float* buf, unsigned int s);
  33  void matrix_multiplication(int n, int m, float* a, float* x, float* b);
  34  void disp_matrix(int n, int m, float* a);
  35  void check(int n, int m, float* buf, unsigned int s);
  36  
  37  double t1,t2; // start and end time stamp

  38  
  39  /*----------------------------------------------------------------------*/
  40  void spe_active(volatile float* buf, int n, int m){
  41      int i,j;
  42      swt_handle *h[NUMBER_OF_SPES];
  43      spere_object_id hint[NUMBER_OF_SPES][5];
  44      spere_addr ls_addr[NUMBER_OF_SPES];
  45      char *spe_obj[7] = {EXE_SPE1, EXE_SPE2, EXE_SPE3, EXE_SPE4, 
  46                          EXE_SPE5, EXE_SPE6, EXE_SPE7};
  47      
  48      _spe_stdio_init(SPE_STDIO_BUF_SIZE);
  49      _spe_stdio_start();
  50  
  51      for(i=0; i<NUMBER_OF_SPES; i++){
  52          h[i] = spe_wrap_create_dedicated_thread(
  53              spe_obj[i], (void*)&sarg[i], SIGNOTIFY_INIT_MODE);
  54          sarg[i].id      = i;
  55          sarg[i].sc_addr = (unsigned int)&ctrl[i];
  56          spere_spe_thread_map_ls(h[i]->id, &ls_addr[i]);
  57      }
  58      
  59      for(i=0; i<NUMBER_OF_SPES; i++){
  60          ctrl[i].flag     = 0;
  61          ctrl[i].id       = i;
  62          ctrl[i].buf      = (unsigned int)buf;
  63          ctrl[i].buf_ctrl = (unsigned int)buf_ctrl;
  64  
  65          ctrl[i].n        = n;
  66          ctrl[i].m        = m;
  67          ctrl[i].spe_num  = NUMBER_OF_SPES;
  68          ctrl[i].dec_cnt  = 0;
  69          ctrl[i].sync_addr = (unsigned int)sync_addr;
  70          for(j=0;j<NUMBER_OF_SPES;j++){
  71              ctrl[i].ls_addr[j] = ls_addr[j];
  72          }
  73      }
  74      
  75      for(i=0; i<NUMBER_OF_SPES; i++){
  76          hint[i][0] = spe_wrap_add_access_hint(
  77              h[i]->id, (void*)&sarg[i], SPE_DMA_ALIGN);
  78          hint[i][1] = spe_wrap_add_access_hint(
  79              h[i]->id, (void*)&ctrl[i], SPE_DMA_ALIGN);
  80          hint[i][2] = spe_wrap_add_access_hint(
  81              h[i]->id, (void*)buf, sizeof(float)*(n*n+n*m*2)*2);
  82          
  83          // control flag
  84          hint[i][3] = spe_wrap_add_access_hint(
  85              h[i]->id, (void*)buf_ctrl, 16*1024);
  86  
  87          // for sync spes
  88          hint[i][4] = spe_wrap_add_access_hint(
  89              h[i]->id, (void*)&sync_addr[0], sizeof(struct spe_sync_block)*NUMBER_OF_SPES);
  90      }
  91      
  92      for(i=0; i<NUMBER_OF_SPES; i++) spe_wrap_resume_thread(h[i]->id);
  93      
  94      t1 = my_clock();
  95      for(i=0; i<NUMBER_OF_SPES; i++) ctrl[i].flag = 1;
  96      for(i=0; i<NUMBER_OF_SPES; i++) spe_wrap_wait_thread(h[i]->id);
  97      t2 = my_clock();
  98      
  99      for(i=0; i<NUMBER_OF_SPES; i++){
 100          spe_wrap_remove_access_hint(h[i]->id, hint[i][0]);
 101          spe_wrap_remove_access_hint(h[i]->id, hint[i][1]);
 102          spe_wrap_remove_access_hint(h[i]->id, hint[i][2]);
 103          spe_wrap_remove_access_hint(h[i]->id, hint[i][3]);
 104  
 105          spe_wrap_remove_access_hint(h[i]->id, hint[i][4]);
 106  
 107          spere_spe_thread_unmap_ls(h[i]->id);
 108          spe_wrap_release_thread(h[i]);
 109      }
 110      _spe_stdio_end();
 111  };
SPEプログラムを起動-終了までを担う関数です。
SPE用標準出力関数の設定、スレッドの生成、SPEへ受け渡す制御用構造体のデータ格納、
アクセスヒントの設定、スレッドの起動、
および、
終了待ち、アクセスヒント、スレッドの解放、標準出力の終了などの処理を行います。

 112  
 113  /*----------------------------------------------------------------------*/
 114  /* PPE main program                                                     */
 115  /*----------------------------------------------------------------------*/
 116  int main(int argc, char *argv[])
PPEのメイン関数です。
実際のコンテストでは，PPEによる計算処理を禁止する
可能性がありますので，できるかぎりSPEで処理を行うようにしてください．

 117  {
 118      int i;
 119      int n; // matrix vector
 120  //    int m = 1; // number of solution vector
 121      int m; // number of solution vector
 122      
 123      float* x;
 124      double flops;
 125      double etime;
 126      unsigned int s;
 127  
 128      if(argc != 4){
 129          printf("lu_deconposition N (matrix size) M (vector number) S (Matrix No.).\n");
 130          exit(1);
 131      }
 132      n = atoi(argv[1]);
 133      m = atoi(argv[2]);
 134      s = atoi(argv[3]);
現在のツールキットでは、係数行列サイズ n 、右辺ベクトルの本数 m、問題のタイプは、標準入力から受け取ります。

 135      
 136      x   = (float*)((unsigned int)buf+sizeof(float)*(n*n+n*m));
 137      printf("[ppe_] User Area allocated : %1.5f[KByte].\n",(float)sizeof(float)*(n*n+n*m*2)*2/1024.0);
 138      printf("[ppe_] Memory for matrix   : %1.5f[KByte].\n",(float)sizeof(float)*(n*n+n*m*2)/1024.0);
解ベクトルの開始アドレスをポインタx に格納しています。

 139  
 140      // Generate matrix
 141      srand((unsigned int)s);
 142      get_matrix(n,n,(float*)buf,s);
 143      generate_matrix(n, m, (float*)buf, s);
 144  
 145      /*
 146      disp_matrix(n, n, (float*)buf);
 147      printf("\n");
 148      disp_matrix(n, m, (float*)((unsigned int)buf+sizeof(float)*n*n));
 149      printf("\n");
 150      disp_matrix(n, m, (float*)x);
 151      */
 152  
 153      for(i=0;i<n;i++) x[i] = 0.0;
乱数の初期化、問題行列Aの生成、係数ベクトルbの生成を行っています。
解ベクトルxはクリアしてしまいます。

 154  
 155      printf("\n");
 156      printf("[ppe_] %08X\n",(unsigned int)buf);
 157      
 158      spe_active(buf, n, m);
SPE起動ルーチンを呼び、計算を開始します。

 159  
 160  //    disp_matrix(n, m, (float*)x);
 161    
 162      check(n,m,(float*)buf,s);
チェックルーチンを呼び、計算された解ベクトルが正しいかをチェックします。

 163  
 164      etime = ctrl[0].dec_cnt / (100.0 * 1024.0 * 1024.0);
 165      flops =  0.0;
 166      flops += (2.0/3.0) * n * n * n + (3.0/2.0) * n * n + (5.0/6.0) * n; // LU decomposition
 167      flops += (n * n + n) * m;       // forward substitution
 168      flops += (n * n + 2.0 * n) * m; // backward substitution
 169      flops /= (etime * 1000000.0);
 170      
 171      printf("[spe_] elapsed time(sec) %8.6f\n", etime);
 172      printf("Performance : %5.2f [MFlops]\n", flops);
計算に掛かった時間、およびMFLOPS値を表示します。

 173      
 174      return 0;
 175  }



file name: main_spe.c
   1  /*----------------------------------------------------------------------*/
   2  /* Cell Speed Challenge 2008, ToolKit Version 2007-12-07                */
   3  /*----------------------------------------------------------------------*/
   4  #include <spu_intrinsics.h>
   5  #include <spelib.h>
   6  #include <spe_stdio.h>
   7  #include <stdlib.h>
   8  #include <spu_mfcio.h>
   9  #include <float.h>
  10  #include <math.h>
  11  #include "spe_util.h"
  12  #include "define.h"
main_spe.cはSPEが実行するプログラムです。

  13  
  14  /*----------------------------------------------------------------------*/
  15  volatile static struct spe_ctrl       sc _GALIGN;
  16  
  17  //extern void spe_sort(struct spe_ctrl* sc);
  18  extern void dmaget(void* d, unsigned long long addr, unsigned int size);
  19  extern void dmaput(void* d, unsigned long long addr, unsigned int size);
  20  extern void spe_time_start(struct spe_ctrl* sc,unsigned long long argv);
  21  extern void spe_time_end(struct spe_ctrl* sc);
転送用の関数の宣言(spe1.cで記述)、作業領域(224KB)の確保を行っています。

  22  
  23  struct transfer_block{ // 128 Byte
  24      float data[32];
  25  };
  26  
  27  volatile static struct transfer_block tb _GALIGN;
データ転送用の構造体です。

  28  
  29  /*----------------------------------------------------------------------*/
  30  void swap_row(int s, int d, int n, float* a){
  31      int i;
  32      float t;
  33      for(i=0;i<n;i++){
  34          t = a[n*s+i];
  35          a[n*s+i] = a[n*d+i];
  36          a[n*d+i] = t;
  37      }
  38  }
行列の「行」交換用の関数です。
n個の行要素を持つ行列aのs番目とd番目の行を交換します。

  39
  40  void swap_col(int s, int d, int n, int m, float* b){
  41      int i;
  42      float t;
  43      for(i=0;i<m;i++){
  44          t = b[n*i+s];
  45          b[n*i+s] = b[n*i+d];
  46          b[n*i+d] = t;
  47      }
  48  }
行列の「列」交換用の関数です。
n個の行要素、m個の列要素を持つ行列aのs番目とd番目の列を交換します。

  49  
  50  void forward_substitution(int n, int m, float* a, float* b, float* c){
  51      int i,j;
  52      for(i=0;i<n;i++){
  53          c[i] = b[m*n+i];
  54          for(j=0;j<i;j++){
  55              c[i] -= a[i*n+j] * c[j];
  56          }
  57      }
  58  }
前進代入関数です。

  59  
  60  void backward_substitution(int n, int m, float* a, float* c, float* x){
  61      int i,j;
  62      for(i=n-1;i>=0;i--){
  63          x[m*n+i] = c[i];
  64          for(j=n-1;j>i;j--){
  65              x[m*n+i] -= a[i*n+j]*x[m*n+j];
  66          }
  67          x[m*n+i] /= a[i*n+i];
  68      }
  69  }
後退代入関数です。

  70  
  71  void lu_deconposition(int n, int m, float* a, float* b){
  72      int i,j,k;
  73      float t;
  74      int maxj;
  75  
  76      for(i=0;i<n;i++){
  77          // pivot selection
  78          maxj = i;
  79          t = a[i];
  80          for(j=i+1;j<n;j++){
  81              if(fabs(a[n*j+i]) > fabs(a[n*maxj+i])){
  82                  maxj = j;
  83              }
  84          }
  85          swap_row(i,maxj,n,a);
  86          swap_col(i,maxj,n,m,b);
  87          // right looking 
  88          for(j = i+1; j < n; j++) {
  89              a[n*j+i] /= a[n*i+i];
  90              for(k=i+1; k<n; k++){
  91                  a[n*j+k] -= a[n*i+k] * a[n*j+i];
  92              }
  93          }
  94      }
  95  }
LU分解を行う関数です。
部分ピボット選択を行っています。
1回だけLU分解を行う関数です。

  96  
  97  void spe_lu_deconposition(int n, int m, float* buf){
  98      int i;
  99      float* b;
 100      float* c;
 101      float* x;
 102  
 103      b = (float*)((unsigned int)buf+sizeof(float)*(n*n));
 104      x = (float*)((unsigned int)buf+sizeof(float)*(n*n+n*m));
 105      c = (float*)((unsigned int)buf+sizeof(float)*(n*n+n*m+n*m));
 106  
 107      lu_deconposition(n, m, buf, b);
 108  
 109      for(i=0;i<m;i++){
 110          forward_substitution(n, i, buf, b, c);
 111          backward_substitution(n, i, buf, c, x);
 112      }
 113  }
SPEでLU分解を行って解ベクトルを求める関数です。
1回だけLU分解を行い、右辺ベクトルの本数だけ、前進代入、後退代入を行います。


 114  
 115  void spe_soleqs(struct spe_ctrl* sc){
 116      int i;
 117  
 118      unsigned int msize;
 119      unsigned int paddr,saddr;
 120      volatile static float buf[224*256] _GALIGN;
 121  
 122      if(sc->id == 0){
 123          msize = (sc->n * sc->n + sc->n * sc->m) * sizeof(float);
 124          paddr  = sc->buf;
 125          saddr  = (unsigned int)buf;
 126          for(i=0; i<=msize/128; i++){
 127              dmaget((void*)saddr, paddr, 128);
 128              saddr+=128;
 129              paddr+=128;
 130          }
 131  
 132          spe_lu_deconposition((int)sc->n, (int)sc->m, (float*)buf);
 133  
 134          msize = (sc->n * sc->n + sc->n * sc->m * 2) * sizeof(float);
 135          paddr  = sc->buf;
 136          saddr  = (unsigned int)buf;
 137          for(i=0; i<=msize/128; i++){
 138              dmaput((void*)saddr, paddr, 128);
 139              saddr+=128;
 140              paddr+=128;
 141          }
 142      }
 143  }
SPEのLocal Storeに、メインメモリから行列データを読み出します。
128バイト単位でデータ読み出しを行い、係数行列、右辺ベクトルの全ての要
 素をLocal Storeに読み込みます。
(したがって、行列データが224KBより大きくなると計算ができなくなります)

 144  
 145  /*----------------------------------------------------------------------*/
 146  /* SPE main program                                                     */
 147  /*----------------------------------------------------------------------*/
 148  
 149  int main(int speid, unsigned long long argv)
 150  {
 151      spe_time_start((struct spe_ctrl*)&sc, argv);
 152  /*-----------------------*/
 153      // modify codes in function "spe_soleqs".
 154      spe_soleqs((struct spe_ctrl*)&sc);
 155  /*-----------------------*/
 156      spe_time_end((struct spe_ctrl*)&sc);
 157  
 158      return 0;
 159  }
 160  /*----------------------------------------------------------------------*/
SPEのメインプログラムです。
コンテスト参加者はspe_soleqs関数内を書き換えることになります。


file name: spe.h
   1  /*----------------------------------------------------------------------*/
   2  /* Cell Speed Challenge 2008, ToolKit Version 2007-12-07                */
   3  /*----------------------------------------------------------------------*/
   4  #define EXE_SPE1 "~/toolkit01/spe1"
   5  #define EXE_SPE2 "~/toolkit01/spe1"
   6  #define EXE_SPE3 "~/toolkit01/spe1"
   7  #define EXE_SPE4 "~/toolkit01/spe1"
   8  #define EXE_SPE5 "~/toolkit01/spe1"
   9  #define EXE_SPE6 "~/toolkit01/spe1"
  10  #define EXE_SPE7 "~/toolkit01/spe1"
  11  /*----------------------------------------------------------------------*/
それぞれのSPEが実行するプログラムのファイル名を指定します．ファイル名は
ユーザのディレクトリからのパスを指定します．
ここでは，すべてのSPEがspeed/spe1という名前のプログラムを利用する設定と
なっています．それぞれのSPEが異なるプログラムを実行してもかまいません．


file name: spe1.c
   1  /*----------------------------------------------------------------------*/
   2  /* Cell Speed Challenge 2008, ToolKit Version 2007-12-07                */
   3  /*----------------------------------------------------------------------*/
   4  #include <stdlib.h>
   5  #include <float.h>
   6  #include <spu_intrinsics.h>
   7  #include <spelib.h>
   8  #include <spe_stdio.h>
   9  #include <spu_mfcio.h>
  10  #include "spe_util.h"
  11  #include "define.h"
  12  #include "spe.h"
  13  
  14  #define DEC_INIT_VAL 0x77359400

spe1.cは時間計測、データ転送用の関数が記述されたファイルです。

  15  
  16  /*-----------------------------------------------------------------------*/
  17  
  18  volatile static struct argument arg _GALIGN;
  19  volatile static struct spe_ctrl sc _GALIGN;
  20  
  21  volatile static struct spe_sync_block spe_sync _GALIGN;
  22  volatile static struct spe_sync_block sync_addr _GALIGN;
  23  unsigned int dec_cnt;
  24  
  25  /*----------------------------------------------------------------------*/
  26  void dmaget(void* d, unsigned long long addr, unsigned int size){
  27      /***** DMA Data Transfer, Memory -> LS *****/
  28      mfc_get(d, addr, size, DMA_TAG, 0, 0);
  29      mfc_write_tag_mask(DMA_TAG_MASK(DMA_TAG));
  30      mfc_write_tag_update_all();
  31      mfc_read_tag_status();
  32  }
  33  
  34  /*----------------------------------------------------------------------*/
  35  void dmaput(void* d, unsigned long long addr, unsigned int size){
  36      /***** DMA Data Transfer, LS -> Memory *****/
  37      mfc_put(d, addr, size, DMA_TAG, 0, 0);
  38      mfc_write_tag_mask(DMA_TAG_MASK(DMA_TAG));
  39      mfc_write_tag_update_all();
  40      mfc_read_tag_status();
  41  }
  42
DMA転送で、PPE-SPE間のデータ転送を行う関数です。
転送は128バイト単位で，受渡しするポインタは128バイトでアライメントされていなければ
なりません。

  43  /*----------------------------------------------------------------------*/
  44  
  45  void spe_time_start(struct spe_ctrl* sc, unsigned long long argv){
  46      int i;
  47  
  48      dmaget((void*)&arg, argv, SPE_DMA_ALIGN);
  49      
  50      sc->flag = 0;
  51      while(sc->flag==0){
  52          dmaget((void*)sc, arg.sc_addr, SPE_DMA_ALIGN);
  53      }
  54  
  55      sync_addr.data[0] = (unsigned int)&spe_sync;
  56      dmaput((void*)&sync_addr, sc->sync_addr + sc->id * SPE_DMA_ALIGN, SPE_DMA_ALIGN);
  57  
  58      if(sc->id == 0){
  59          spe_sync.data[0] = 1;
  60  
  61          spu_write_decrementer(DEC_INIT_VAL);
  62          dec_cnt = spu_read_decrementer();
  63  
  64          for(i=1;i<NUMBER_OF_SPES;i++){
  65              dmaget((void*)&sync_addr, sc->sync_addr + i * SPE_DMA_ALIGN, SPE_DMA_ALIGN);
  66              sync_addr.data[1] = sync_addr.data[0] + sc->ls_addr[i];
  67  
  68              dmaput((void*)&spe_sync, sync_addr.data[1], SPE_DMA_ALIGN);
  69          }
  70      }
  71      else{
  72          while(1){
  73              if(spe_sync.data[0] == 1){
  74                  break;
  75              }
  76          }
  77      }
  78  };
  79  
  80  /*----------------------------------------------------------------------*/
  81  
  82  void spe_time_end(struct spe_ctrl* sc){
  83      if(sc->id == 0){
  84          sc->dec_cnt = dec_cnt - spu_read_decrementer();
  85          dmaput((void*)sc, arg.sc_addr, SPE_DMA_ALIGN);
  86      }
  87  };
  88  
  89  /*----------------------------------------------------------------------*/
時間計測用のルーチンです。


ここからは，ソースコードから実行ファイルを生成するための規則を記述した
Makefileです．makeコマンドが参照します．
ファイル構成やコンパイルの最適化オプションなどを変更しない場合には，
このMakefileを変更する必要はありません．
file name: Makefile
file name: Makefile
   1  #######################################################################
   2  # Cell Speed Challenge 2007, ToolKit Version 2007-12-07
   3  #######################################################################
   4  IDIR        = /export/home/cell2008/
   5  EXE_FILE    = ~/speed/main
   6  TIMEOUT_SEC = 20
   7  
これらのファイルをspeedというディレクトリ以外に格納する場合には，上の
部分を変更します．また，実行のタイムアウトを15秒に設定していますので，
巨大な数のデータをソーティングする場合などはタイムアウトの時間を大きく
してください．

   8  #######################################################################
   9  SPERE   = -I/usr/local/tsb/tool/spere/include
  10  
  11  PPE_OPT = -O0 -Wall -m32
  12  PPE_I   = -I$(IDIR)include/ppe -I$(IDIR)include/common $(SPERE) -I..
  13  PPE_L   = -L$(IDIR)lib -L/usr/local/tsb/tool/spere/lib
  14  PPE_LIB = -lspe_stdio_srv -lspe_rpc_srv -lspere_lib -lspere -lpthread -lm
  15  PPE_CC  = /usr/local/tsb/tool/bin/ppu-gcc
  16  PPE_ADD = $(PPE_OPT) $(PPE_I) $(PPE_L)
  17  
  18  SPE_OPT = -O3 -Wall -Wno-main
  19  SPE_I   = -I$(IDIR)include/spe -I$(IDIR)include/common $(SPERE) -I..
  20  SPE_L   = -L$(IDIR)lib -L/usr/local/tsb/tool/spere/lib
  21  SPE_LIB = -lspe_stdio -lspe_rpc 
  22  SPE_CC  = /usr/local/tsb/tool/bin/spu-gcc
  23  SPE_ADD = $(SPE_OPT) $(SPE_I) $(SPE_L)
  24  
  25  #######################################################################
  26  all:
  27  	make main spe1
  28  
ここでコンパイルのための最適化オプションなどを設定します．通常は -O3 を
利用します．

  29  #######################################################################
  30  main: main_ppe.c define.h spe.h lib.c Makefile
  31  	$(PPE_CC) $(PPE_ADD) lib.c main_ppe.c -o main $(PPE_LIB)
  32  
  33  spe1: main_spe.c spe1.c define.h spe.h Makefile
  34  	$(SPE_CC) $(SPE_ADD) main_spe.c spe1.c -o spe1 $(SPE_LIB) 
  35  
main.c 以外のファイルや，複数のファイルにプログラムを記述する場合などは，
この部分を変更します．

  36  #######################################################################
  37  run:
  38  	cellexec -t $(TIMEOUT_SEC) $(EXE_FILE)
  39  
  40  runall:
  41  	cellexec -t $(TIMEOUT_SEC) $(EXE_FILE) 1
  42  	cellexec -t $(TIMEOUT_SEC) $(EXE_FILE) 2
  43  	cellexec -t $(TIMEOUT_SEC) $(EXE_FILE) 3
  44  	cellexec -t $(TIMEOUT_SEC) $(EXE_FILE) 4
  45  	cellexec -t $(TIMEOUT_SEC) $(EXE_FILE) 5
  46  
  47  #######################################################################
  48  clean:
  49  	rm -f *~ *.o main spe1 spe2 spe3 spe4 spe5 spe6 spe7 
  50  
  51  #######################################################################
  52  lib:
  53  	$(PPE_CC) $(PPE_ADD) lib.c -c
  54  #######################################################################
  55  text:
  56  	kcat define.h spe.h main_ppe.c main_spe.c Makefile > Code.txt
  57  #######################################################################

質問やバグ情報などは cell2008info@matlab.nitech.ac.jp までお願いします。
なお頂いた質問等は，お名前を伏せた上でコミュニティボード等で公開させて
いただくことがあります。予めご了承ください。

<------------------------------------------------------------------------------>
