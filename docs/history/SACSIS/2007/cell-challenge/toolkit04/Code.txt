
file name: define.h
   1  /*----------------------------------------------------------------------*/
   2  /* Cell Speed Challenge 2007, Sample ToolKit Version 2007-02-02         */
   3  /*----------------------------------------------------------------------*/
   4  #define NUMBER_OF_SPES 7
   5  #define EXE_SPE1 "speed/spe1"
   6  #define EXE_SPE2 "speed/spe1"
   7  #define EXE_SPE3 "speed/spe1"
   8  #define EXE_SPE4 "speed/spe1"
   9  #define EXE_SPE5 "speed/spe1"
  10  #define EXE_SPE6 "speed/spe1"
  11  #define EXE_SPE7 "speed/spe1"
  12  
  13  #define KEY_TYPE 1 // choose 1 or 2
  14  #define LIST_NUM 7 // list size M
  15  #define INPUT_DATA (30 * 1024 * 1024) // input data size
  16  
  17  #define ELEMENT_SIZE (4*(KEY_TYPE + LIST_NUM)) // element size
  18  #define DATA_NUM (INPUT_DATA/ELEMENT_SIZE)     // the number of element N
  19  #define USER_MEM (INPUT_DATA*3)                // user working memory
  20  
  21  /*----------------------------------------------------------------------*/
  22  #define DMA_TAG 0
  23  #define SPE_STDIO_BUF_SIZE 512
  24  #define SPE_DMA_ALIGN (128)
  25  
  26  /*----------------------------------------------------------------------*/
  27  struct argument{
  28      int id;               //
  29      unsigned int sc_addr; //
  30      float padding[30];    // just for padding
  31  };
  32  
  33  struct spe_ctrl{
  34      unsigned int flag;        //
  35      unsigned int id;          //
  36      unsigned int spe_num;     //
  37      unsigned int buf_addr;    //
  38      unsigned int n;           // the number of element N
  39      unsigned int listnum;     // list size M
  40      unsigned int keytype;     //
  41      unsigned int padding[25]; // just for padding
  42  };
  43  /*----------------------------------------------------------------------*/

file name: lib.c
   1  /*----------------------------------------------------------------------*/
   2  /* Cell Speed Challenge 2007, Sample ToolKit Version 2007-02-02         */
   3  /*----------------------------------------------------------------------*/
   4  #include <stdio.h>
   5  #include <stdlib.h>
   6  #include <sys/time.h>
   7  #include <time.h>
   8  #include <spe/sys/spelib_types.h>
   9  #include <spe_stdio_srv.h>
  10  
  11  #include "define.h"
  12  
  13  struct data_block{ // 32 Byte
  14      float key;
  15      float data[LIST_NUM];
  16  };
  17  
  18  /*----------------------------------------------------------------------*/
  19  double my_clock()
  20  {
  21      struct timeval tv;
  22      gettimeofday(&tv, NULL);
  23      return tv.tv_sec + (double)tv.tv_usec*1e-6;
  24  };
  25  
  26  /*----------------------------------------------------------------------*/
  27  
  28  void generate_list(float* buf, int datanum, int listnum){
  29      int i,j;
  30      
  31      srand((unsigned int)time(NULL));
  32  //    srand(1);
  33      
  34      for(i = 0; i<datanum; i++){
  35          buf[(listnum+1)*i] = 0.0;
  36          for(j = 0; j<listnum; j++){
  37              buf[(listnum+1)*i+j+1] = (float)rand()/RAND_MAX;
  38          }
  39      }
  40  };
  41  
  42  /*----------------------------------------------------------------------*/
  43  float square_norm(float* n, int listnum){
  44      int i;
  45      float norm = 0.0;
  46      for(i=0; i<listnum; i++) norm += (n[i] * n[i]);
  47      return norm;
  48  };
  49  
  50  /*----------------------------------------------------------------------*/
  51  void check_list(float* buf,int datanum, int listnum, int keytype){
  52      int i;
  53      struct data_block* ssblock;
  54      
  55      ssblock = (struct data_block*)buf;
  56      for(i=1;i<datanum;i++){
  57          if(ssblock[i - 1].key > ssblock[i].key){
  58              printf("[ppe_] * Wrong! * n[%d]:k1 %5.10f n[%d] k2 %5.10f\n",
  59                     i-1, ssblock[i - 1].key, i, ssblock[i].key);
  60              return;
  61          }
  62      }
  63      printf("[ppe_] * Result Good! *\n");
  64  }
  65  /*----------------------------------------------------------------------*/

file name: main.c
   1  /*----------------------------------------------------------------------*/
   2  /* Cell Speed Challenge 2007, Sample ToolKit Version 2007-02-02         */
   3  /*----------------------------------------------------------------------*/
   4  #include <stdio.h>
   5  #include <spe/sys/spelib_types.h>
   6  #include <spe_stdio_srv.h>
   7  #include "spe_wrap.h"
   8  #include "ppe_util.h"
   9  #include "define.h"
  10  #include <float.h>
  11  #include <fenv.h>
  12  #include <spere_cbea.h>
  13  
  14  /*----------------------------------------------------------------------*/
  15  double my_clock();
  16  void generate_list(float*, int, int);
  17  void check_list(float*, int, int, int);
  18  
  19  volatile static float buf[USER_MEM/4] _ALIGN;
  20  volatile static struct argument sarg[NUMBER_OF_SPES] _ALIGN;
  21  volatile static struct spe_ctrl ctrl[NUMBER_OF_SPES] _ALIGN;
  22  double t1,t2; // start and end time stamp
  23  
  24  /*----------------------------------------------------------------------*/
  25  void ppe_sort(volatile float* buf, int n, int listnum, int keytype){
  26     int i;
  27     swt_handle *h[NUMBER_OF_SPES];
  28     spere_object_id hint[NUMBER_OF_SPES][3];
  29  
  30     _spe_stdio_init(SPE_STDIO_BUF_SIZE);
  31     _spe_stdio_start();
  32  
  33     for(i=0; i<NUMBER_OF_SPES; i++){
  34         h[i] = spe_wrap_create_dedicated_thread(
  35             EXE_SPE1, (void*)&sarg[i], SIGNOTIFY_INIT_MODE);
  36         sarg[i].id      = i;
  37         sarg[i].sc_addr = (unsigned int)&ctrl[i];
  38     }
  39  
  40     for(i=0; i<NUMBER_OF_SPES; i++){
  41         ctrl[i].flag     = 0;
  42         ctrl[i].id       = i;
  43         ctrl[i].buf_addr = (unsigned int)buf;
  44         ctrl[i].n        = n;
  45         ctrl[i].listnum  = listnum;
  46         ctrl[i].spe_num  = NUMBER_OF_SPES;
  47     }
  48  
  49     for(i=0; i<NUMBER_OF_SPES; i++){
  50         hint[i][0] = spe_wrap_add_access_hint(
  51             h[i]->id, (void*)&sarg[i], SPE_DMA_ALIGN);
  52         hint[i][1] = spe_wrap_add_access_hint(
  53             h[i]->id, (void*)&ctrl[i], SPE_DMA_ALIGN);
  54         hint[i][2] = spe_wrap_add_access_hint(
  55             h[i]->id, (void*)buf, USER_MEM);
  56     }
  57  
  58     for(i=0; i<NUMBER_OF_SPES; i++) spe_wrap_resume_thread(h[i]->id);
  59  
  60     /**** start the sorting *****/
  61     t1 = my_clock();
  62     for(i=0; i<NUMBER_OF_SPES; i++) ctrl[i].flag = 1;
  63     for(i=0; i<NUMBER_OF_SPES; i++) spe_wrap_wait_thread(h[i]->id);
  64     t2 = my_clock();
  65     /**** end   the sorting *****/
  66  
  67     for(i=0; i<NUMBER_OF_SPES; i++){
  68         spe_wrap_remove_access_hint(h[i]->id, hint[i][0]);
  69         spe_wrap_remove_access_hint(h[i]->id, hint[i][1]);
  70         spe_wrap_remove_access_hint(h[i]->id, hint[i][2]);
  71         spe_wrap_release_thread(h[i]);
  72     }
  73     _spe_stdio_end();
  74  /*
  75     {
  76         int j;
  77         for(i=0;i<n;i++){
  78             printf("%4d : key %3.3f : ",i,buf[i*(listnum+1)]);
  79             for(j=0;j<listnum;j++){
  80                 printf("%3.3f ",buf[i*(listnum+1)+j+1]);
  81             }
  82             printf("\n");
  83         }
  84     }
  85  */
  86  };
  87  
  88  /*----------------------------------------------------------------------*/
  89  int main(int argc, char *argv[])
  90  {
  91     int n       = DATA_NUM;
  92     int listnum = LIST_NUM;
  93     int keytype = KEY_TYPE;
  94  
  95     if(argc == 4){
  96         n       = atoi(argv[1]);
  97         listnum = atoi(argv[2]);
  98         keytype = atoi(argv[3]);
  99     }
 100  
 101     generate_list((float*)buf, n, listnum);
 102     ppe_sort((volatile float*)buf, n, listnum, keytype);
 103     check_list((float*)buf, n, listnum, keytype);
 104  
 105     printf("[ppe_] n %d, listnum %d, input data size %d [MByte]\n",
 106            n, listnum, sizeof(float)*n*(listnum+1)/1024/1024);
 107     printf("[ppe_] elapsed time(sec) %8.6f\n", t2-t1);
 108     return 0;
 109  }
 110  /*----------------------------------------------------------------------*/

file name: spe1.c
   1  /*----------------------------------------------------------------------*/
   2  /* Cell Speed Challenge 2007, Sample ToolKit Version 2007-02-02         */
   3  /*----------------------------------------------------------------------*/
   4  #include <spu_intrinsics.h>
   5  #include <spelib.h>
   6  #include <spe_stdio.h>
   7  #include <stdlib.h>
   8  #include <spu_mfcio.h>
   9  #include "spe_util.h"
  10  #include "define.h"
  11  #include <float.h>
  12  
  13  /*----------------------------------------------------------------------*/
  14  struct data_block{ // 32 Byte
  15      float key;
  16      float data[LIST_NUM];
  17  };
  18  
  19  struct transfer_block{ // 128 Byte
  20      struct data_block dblock[4];
  21  };
  22  
  23  struct sync_block{
  24      unsigned int status[32];
  25  };
  26  
  27  struct merge_return{
  28      int oa;
  29      int ob;
  30  };
  31  /*----------------------------------------------------------------------*/
  32  
  33  volatile static struct argument arg _GALIGN;
  34  volatile static struct spe_ctrl sc _GALIGN;
  35  volatile static struct sync_block sb _GALIGN;
  36  volatile static struct transfer_block eb _GALIGN;
  37  
  38  /*----------------------------------------------------------------------*/
  39  void dmaget(void* d, unsigned long long addr, unsigned int size){
  40      /***** DMA Data Transfer, Memory -> LS *****/
  41      mfc_get(d, addr, size, DMA_TAG, 0, 0);
  42      mfc_write_tag_mask(DMA_TAG_MASK(DMA_TAG));
  43      mfc_write_tag_update_all();
  44      mfc_read_tag_status();
  45  }
  46  
  47  /*----------------------------------------------------------------------*/
  48  void dmaput(void* d, unsigned long long addr, unsigned int size){
  49      /***** DMA Data Transfer, LS -> Memory *****/
  50      mfc_put(d, addr, size, DMA_TAG, 0, 0);
  51      mfc_write_tag_mask(DMA_TAG_MASK(DMA_TAG));
  52      mfc_write_tag_update_all();
  53      mfc_read_tag_status();
  54  }
  55  /*----------------------------------------------------------------------*/
  56  float square_norm(float* n, int listnum){
  57      int i;
  58      float norm = 0.0;
  59      for(i=0; i<listnum; i++) norm += (n[i] * n[i]);
  60      return norm;
  61  };
  62  
  63  /*----------------------------------------------------------------------*/
  64  unsigned int get_eaddr(unsigned int saddr, int eid){
  65      unsigned int eaddr;
  66      eaddr = saddr + eid * 128;
  67      return eaddr;
  68  };
  69  
  70  /*----------------------------------------------------------------------*/
  71  struct transfer_block get_tblock(int eid, struct spe_ctrl* sc){
  72      unsigned int eaddr; // element address
  73  
  74      eaddr = get_eaddr(sc->buf_addr,eid);
  75      dmaget((void*)&eb, eaddr, sizeof(struct transfer_block));
  76      
  77      return eb;
  78  };
  79  
  80  /*----------------------------------------------------------------------*/
  81  void put_tblock(int eid, struct transfer_block* eblock, struct spe_ctrl* sc){
  82      unsigned int eaddr; // element address
  83      eaddr = get_eaddr(sc->buf_addr,eid);
  84      dmaput((void*)eblock, eaddr, sizeof(struct transfer_block));
  85  };
  86  
  87  /*----------------------------------------------------------------------*/
  88  struct data_block get_data(int id, struct spe_ctrl* sc){
  89      unsigned int eid;
  90      unsigned int eoffset;
  91      struct transfer_block eblock;
  92      
  93      eid     = id / 4;
  94      eoffset = id % 4;
  95      eblock = get_tblock(eid, sc);
  96      
  97      return eblock.dblock[eoffset];
  98  };
  99  
 100  /*----------------------------------------------------------------------*/
 101  void swap_db(int id1, int id2, struct spe_ctrl* sc){
 102      struct transfer_block eblock[2];
 103      unsigned int eid[2];
 104      unsigned int eoffset[2];
 105      struct data_block tmp_db;
 106  
 107      eid[0]     = id1 / 4;
 108      eoffset[0] = id1 % 4;
 109  
 110      eid[1]     = id2 / 4;
 111      eoffset[1] = id2 % 4;
 112      
 113      if(eid[0] == eid[1]){
 114          eblock[0] = get_tblock(eid[0], sc);
 115          tmp_db                       = eblock[0].dblock[eoffset[0]];
 116          eblock[0].dblock[eoffset[0]] = eblock[0].dblock[eoffset[1]];
 117          eblock[0].dblock[eoffset[1]] = tmp_db;
 118          put_tblock(eid[0], &eblock[0], sc);
 119      }
 120      else{
 121          eblock[0] = get_tblock(eid[0], sc);
 122          eblock[1] = get_tblock(eid[1], sc);
 123          
 124          tmp_db                       = eblock[0].dblock[eoffset[0]];
 125          eblock[0].dblock[eoffset[0]] = eblock[1].dblock[eoffset[1]];
 126          eblock[1].dblock[eoffset[1]] = tmp_db;
 127          
 128          put_tblock(eid[0], &eblock[0], sc);
 129          put_tblock(eid[1], &eblock[1], sc);
 130      }
 131  };
 132  
 133  /*----------------------------------------------------------------------*/
 134  void qs_sort(int s, int e, struct spe_ctrl* sc){
 135      int l,r;
 136      struct data_block p;
 137      struct data_block fl,fr;
 138      
 139      p = get_data(((s+e)/2),sc);
 140      l = s;
 141      r = e;
 142  
 143      fl = get_data(l,sc);
 144      fr = get_data(r,sc);
 145  
 146      while(1){
 147          while(fl.key < p.key){
 148              l++;
 149              fl = get_data(l,sc);
 150          }
 151          while(fr.key > p.key){
 152              r--;
 153              fr = get_data(r,sc);
 154          }
 155  
 156          if(l >= r)
 157              break;
 158  
 159          swap_db(l, r, sc);
 160  
 161          l++;
 162          r--;
 163          fl = get_data(l,sc);
 164          fr = get_data(r,sc);
 165      }
 166  
 167      if(l - s > 1) qs_sort(s, l-1, sc);
 168      if(e - r > 1) qs_sort(l, e, sc);
 169  };
 170  
 171  /*----------------------------------------------------------------------*/
 172  void sort_phase1(struct spe_ctrl* sc){
 173      int i,j;
 174      int elnum; // element number
 175      unsigned int eaddr;
 176      unsigned int s;
 177      unsigned int e;
 178  
 179      elnum = sc->n / 16;
 180  
 181      // key calculation
 182      for(i=0;i<elnum;i++){
 183          eaddr = get_eaddr(sc->buf_addr, elnum * sc->id + i);
 184          dmaget((void*)&eb, eaddr, sizeof(struct data_block)*4);
 185          for(j=0;j<4;j++){
 186              eb.dblock[j].key = square_norm((float*)eb.dblock[j].data,sc->listnum);
 187          }
 188          dmaput((void*)&eb, eaddr, sizeof(struct data_block)*4);
 189      }
 190  
 191      // Sub sorting in a divided elements
 192      s = sc->id * elnum * 4;
 193      e = s + (elnum * 2);
 194      qs_sort(s,e-1,sc);
 195      
 196      s = (sc->id * elnum * 4) + (elnum * 2);
 197      e = s + (elnum * 2);
 198      qs_sort(s,e-1,sc);
 199  };
 200  
 201  /*----------------------------------------------------------------------*/
 202  void merge_core(struct spe_ctrl* sc, struct merge_return* mr,
 203                  int sa, int sanum, int sb, int sbnum, int da, int danum){
 204      int i,j,oa,ob;
 205      struct data_block dba,dbb;
 206      struct transfer_block eblock;
 207      int d;
 208      
 209      d  = da / 4;
 210      oa = mr->oa;
 211      ob = mr->ob;
 212      
 213      i = 0;
 214      j = 0;
 215      while(i != danum / 4){
 216          if(oa == sanum){
 217              eblock.dblock[j] = get_data(sb + ob, sc);
 218              ob++;
 219          }
 220          else if(ob == sbnum){
 221              eblock.dblock[j] = get_data(sa + oa, sc);
 222              oa++;
 223          }
 224          else{
 225              dba = get_data(sa + oa, sc);
 226              dbb = get_data(sb + ob, sc);
 227              if(dba.key > dbb.key){
 228                  eblock.dblock[j] = dbb;
 229                  ob++;
 230              }
 231              else{
 232                  eblock.dblock[j] = dba;
 233                  oa++;
 234              }
 235          }
 236  
 237          j++;
 238          if(j == 4){
 239              put_tblock(d,&eblock,sc);
 240              d++;
 241              i++;
 242              j = 0;
 243          }
 244      }
 245  
 246      mr->oa = oa;
 247      mr->ob = ob;
 248  }
 249  
 250  /*----------------------------------------------------------------------*/
 251  void merge_sort_sub(struct spe_ctrl* sc, int sa, int sanum,int sb, 
 252                      int sbnum,int da, int danum,int db, int dbnum){
 253      struct merge_return mr;
 254      
 255      mr.oa = 0;
 256      mr.ob = 0;
 257      
 258      merge_core(sc, &mr, sa, sanum, sb, sbnum, da, danum);
 259      merge_core(sc, &mr, sa, sanum, sb, sbnum, db, dbnum);
 260  };
 261  
 262  /*----------------------------------------------------------------------*/
 263  struct sync_block get_status(int id, struct spe_ctrl* sc){
 264      dmaget((void*)&sb, sc->buf_addr + USER_MEM - ((id + 1) * 128), 128);
 265      return sb;
 266  };
 267  
 268  /*----------------------------------------------------------------------*/
 269  void put_status(int id, int sid, int status, struct spe_ctrl* sc){
 270      dmaget((void*)&sb, sc->buf_addr + USER_MEM - ((id + 1) * 128), 128);
 271      sb.status[sid] = status;
 272      dmaput((void*)&sb, sc->buf_addr + USER_MEM - ((id + 1) * 128), 128);
 273  };
 274  
 275  /*----------------------------------------------------------------------*/
 276  void merge_sort(struct spe_ctrl* sc, int direction, int isa, int isb){
 277      int elnum; // element number
 278      int sa,sb,da,db;
 279      
 280      elnum = sc->n / 8;
 281      
 282      if(direction == 0){
 283          sa = elnum * isa;
 284          sb = elnum * isb;
 285          da = elnum * (isa+8);
 286          db = elnum * (isb+8);
 287      }
 288      else{
 289          sa = elnum * (isa+8);
 290          sb = elnum * (isb+8);
 291          da = elnum * isa;
 292          db = elnum * isb;
 293      }
 294      
 295      merge_sort_sub(sc, sa, elnum, sb, elnum, da, elnum, db, elnum);
 296  };
 297  
 298  /*----------------------------------------------------------------------*/
 299  void wait_spe(struct spe_ctrl* sc, int sid, int status){
 300      int ret;
 301      int i;
 302      int use_spe_num = 4;
 303      struct sync_block sync;
 304      
 305      do{
 306          ret = 0;
 307          for(i=0;i<use_spe_num;i++){
 308              sync = get_status(i,sc);
 309              if(sync.status[sid] != status){
 310                  ret = 1;
 311                  break;
 312              }
 313          }
 314      }while(ret == 1);
 315  };
 316  
 317  /*----------------------------------------------------------------------*/
 318  void sort(struct spe_ctrl* sc){
 319      int i;
 320      
 321      for(i=0; i<2; i++){
 322          put_status(sc->id, 0, i, sc);
 323      }
 324      
 325      sort_phase1(sc);
 326      put_status(sc->id, 0, 1, sc);
 327      wait_spe(sc, 0, 1);
 328      
 329      if(sc->id == 0)      merge_sort(sc, 0, 0, 1);
 330      else if(sc->id == 1) merge_sort(sc, 0, 3, 2);
 331      else if(sc->id == 2) merge_sort(sc, 0, 4, 5);
 332      else if(sc->id == 3) merge_sort(sc, 0, 7, 6);
 333      put_status(sc->id, 1, 2, sc);
 334      wait_spe(sc, 1, 2);
 335      
 336      if(sc->id == 0)      merge_sort(sc, 1, 0, 2);
 337      else if(sc->id == 1) merge_sort(sc, 1, 1, 3);
 338      else if(sc->id == 2) merge_sort(sc, 1, 6, 4);
 339      else if(sc->id == 3) merge_sort(sc, 1, 7, 5);
 340      put_status(sc->id, 0, 3, sc);
 341      wait_spe(sc, 0, 3);
 342      
 343      if(sc->id == 0)      merge_sort(sc, 0, 0, 1);
 344      else if(sc->id == 1) merge_sort(sc, 0, 2, 3);
 345      else if(sc->id == 2) merge_sort(sc, 0, 5, 4);
 346      else if(sc->id == 3) merge_sort(sc, 0, 7, 6);
 347      put_status(sc->id, 1, 4, sc);
 348      wait_spe(sc, 1, 4);
 349      
 350      if(sc->id == 0)      merge_sort(sc, 1, 0, 4);
 351      else if(sc->id == 1) merge_sort(sc, 1, 1, 5);
 352      else if(sc->id == 2) merge_sort(sc, 1, 2, 6);
 353      else if(sc->id == 3) merge_sort(sc, 1, 3, 7);
 354      put_status(sc->id, 0, 5, sc);
 355      wait_spe(sc, 0, 5);
 356      
 357      if(sc->id == 0)      merge_sort(sc, 0, 0, 2);
 358      else if(sc->id == 1) merge_sort(sc, 0, 1, 3);
 359      else if(sc->id == 2) merge_sort(sc, 0, 4, 6);
 360      else if(sc->id == 3) merge_sort(sc, 0, 5, 7);
 361      put_status(sc->id, 1, 6, sc);
 362      wait_spe(sc, 1, 6);
 363      
 364      if(sc->id == 0)      merge_sort(sc, 1, 0, 1);
 365      else if(sc->id == 1) merge_sort(sc, 1, 2, 3);
 366      else if(sc->id == 2) merge_sort(sc, 1, 4, 5);
 367      else if(sc->id == 3) merge_sort(sc, 1, 6, 7);
 368      put_status(sc->id, 0, 7, sc);
 369      wait_spe(sc, 0, 7);
 370  };
 371  
 372  /*----------------------------------------------------------------------*/
 373  /* SPE main program                                                     */
 374  /*----------------------------------------------------------------------*/
 375  int main(int speid, unsigned long long argv)
 376  {
 377      dmaget((void*)&arg, argv, SPE_DMA_ALIGN);
 378      
 379      sc.flag = 0;
 380      
 381      while(sc.flag==0){
 382          dmaget((void*)&sc, arg.sc_addr, SPE_DMA_ALIGN);
 383      }
 384      
 385      /*** in this version, only four SPEs (SPE0 to SPE3) work hard! ***/
 386      if(4>sc.id) sort((struct spe_ctrl*)&sc);
 387      
 388      return 0;
 389  }
 390  /*----------------------------------------------------------------------*/

file name: Makefile
   1  #######################################################################
   2  # Cell Speed Challenge 2007, Sample ToolKit Version 2007-01-08
   3  
   4  #######################################################################
   5  ### Please edit this part!
   6  DIR         = $(HOME)/speed/
   7  IDIR        = /export/home/cell2007/
   8  EXE_FILE    = ~/speed/main
   9  TIMEOUT_SEC = 15
  10  
  11  #######################################################################
  12  SPERE   = -I/usr/local/tsb/tool/spere/include
  13  
  14  PPE_OPT = -O3 -Wall -m32
  15  PPE_I   = -I$(IDIR)include/ppe -I$(IDIR)include/common $(SPERE) -I..
  16  PPE_L   = -L$(IDIR)lib -L/usr/local/tsb/tool/spere/lib
  17  PPE_LIB = -lspe_stdio_srv -lspe_rpc_srv -lspere_lib -lspere -lpthread 
  18  PPE_CC  = /usr/local/tsb/tool/bin/ppu-gcc
  19  PPE_ADD = $(PPE_OPT) $(PPE_I) $(PPE_L)
  20  
  21  SPE_OPT = -O3 -Wall -Wno-main
  22  SPE_I   = -I$(IDIR)include/spe -I$(IDIR)include/common $(SPERE) -I..
  23  SPE_L   = -L$(IDIR)lib -L/usr/local/tsb/tool/spere/lib
  24  SPE_LIB = -lspe_stdio -lspe_rpc 
  25  SPE_CC  = /usr/local/tsb/tool/bin/spu-gcc
  26  SPE_ADD = $(SPE_OPT) $(SPE_I) $(SPE_L)
  27  
  28  #######################################################################
  29  all:
  30  	make main spe1
  31  
  32  #######################################################################
  33  main: main.c lib.c define.h Makefile
  34  	$(PPE_CC) $(PPE_ADD) main.c lib.c -o main $(PPE_LIB)
  35  
  36  spe1: spe1.c define.h Makefile
  37  	$(SPE_CC) $(SPE_ADD) spe1.c -o spe1 $(SPE_LIB) 
  38  
  39  #######################################################################
  40  run:
  41  	cellexec -t $(TIMEOUT_SEC) $(EXE_FILE)
  42  
  43  #######################################################################
  44  clean:
  45  	rm -f *~ *.o main spe1 spe2 spe3 spe4 spe5 spe6 spe7 
  46  
  47  text:
  48  	kcat define.h lib.c main.c spe1.c Makefile > Code.txt
  49  #######################################################################
